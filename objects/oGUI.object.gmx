<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGUI</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>snap=false;
oGUI.tool="sector";
vLook=false;
voidX=10000;
voidY=10000;
global.lvlId=0;
TDPreview=false;
createSector=0;
toolPrev="sector";



//level load
i=1;
mapNum=0;
mapFileLine="";

alpha=1;
createId=0;
createX=0;
createY=0;
createZ=300;
createX2=0;
createY2=0;
teleportX=4500;
teleportY=4500;
teleportZ=292;
isTeleport=false;
triggerId=0;
isTrigger=false;

createHeight=8;
createFloorZ=292;
createFloorHeight=8;
createCeilingZ=332;
createCeilingHeight=8;
xx=0;
yy=0;

level_load_init();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>toolPrev=tool;

if (keyboard_check_direct(vk_control)){
    if(keyboard_check_pressed(vk_numpad0)){
        global.lvlId=get_integer("Change the ID of the current map to:",0);
    }
    if(keyboard_check_pressed(ord('S'))){
        level_save(global.lvlId);
    }
    if(keyboard_check_pressed(ord('L'))){
        level_load(get_integer("Select the ID of the map you want to load:",0));
    }
    if (keyboard_check_pressed(ord('P'))){
        createId=get_integer("createId",createId);
        createZ=get_integer("createZ",createZ);
        createHeight=get_integer("createHeight",createHeight);
        createFloorZ=get_integer("createFloorZ",createFloorZ);
        createFloorHeight=get_integer("createFloorHeight",createFloorHeight);
        createCeilingZ=get_integer("createCeilingZ",createCeilingZ);
        createCeilingHeight=get_integer("createCeilingHeight",createCeilingHeight);
        isTrigger=get_integer("isTrigger",isTrigger);
        if (isTrigger){
            triggerId=get_integer("triggerId",triggerId);
        }
    }
    if (keyboard_check_pressed(ord('M'))){
        tool=get_string("tool",tool);
    }
    if (keyboard_check_pressed(ord('X'))){
        while(instance_number(oLine)&gt;0){
            line=instance_nearest(0,0,oLine);
            if (line.active){
                a=get_integer("X1:",line.x1);
                b=get_integer("Y1:",line.y1);
                c=get_integer("X2:",line.x2);
                d=get_integer("Y2:",line.y2);
                e=get_integer("Z:",line.z);
                f=get_integer("HEIGHT:",line.height);
                break;
            }
            instance_deactivate_object(line);
        }
        if(a=line.x1){a=-100000000;}
        if(b=line.y1){b=-100000000;}
        if(c=line.x2){c=-100000000;}
        if(d=line.y2){d=-100000000;}
        if(e=line.z){e=-100000000;}
        if(f=line.height){f=-100000000;}
        instance_activate_object(oLine);
        
        while(instance_number(oLine)&gt;0){
            line=instance_nearest(0,0,oLine);
                if (line.active){
                    if(a!=-100000000) line.x1=a;
                    if(b!=-100000000) line.y1=b;
                    if(c!=-100000000) line.x2=c;
                    if(d!=-100000000) line.y2=d;
                    if(e!=-100000000) line.z=e;
                    if(f!=-100000000) line.height=f;
                }
            instance_deactivate_object(line);
        }
        instance_activate_object(oLine);
    }
}


if (keyboard_check(ord('W'))){
    view_yview-=5;
}
if (keyboard_check(ord('S'))){
    if !keyboard_check_direct(vk_control){
        view_yview+=5;
    }
}
if (keyboard_check(ord('A'))){
    view_xview-=5;
}
if (keyboard_check(ord('D'))){
    view_xview+=5;
}


if (mouse_check_button_pressed(mb_right) and TDPreview){
    if (instance_number(oLine)&gt;0){
        oLine.active=false;
    }
    if (instance_number(oSlope)&gt;0){
        oSlope.active=false;
    }
}
if (!TDPreview){
    if (mouse_check_button_pressed(mb_left) and !point_in_rectangle(mouse_x,mouse_y,view_xview,view_yview,view_xview+256,view_yview+view_hview)){
        switch (tool){
            case "line" : xx=8+mouse_x div 16*16;
                            yy=8+mouse_y div 16*16;
                break;
            case "slope" : instance_create(mouse_x,mouse_y,oSlope);
                break;
            case "sector" : switch (createSector){
            
                                case 0 : createX=real_snap(mouse_x,16,8);
                                        createY=real_snap(mouse_y,16,8);
                                        createSector=1;
                                    break;
                                case 1 : createX2=real_snap(mouse_x,16,8);
                                        createY2=real_snap(mouse_y,16,8);
                                        createSector=2;
                                    break;
                                case 2 : with (instance_create(0,0,oSector)){
                                            x1=oGUI.createX;
                                            y1=oGUI.createY;
                                            x2=oGUI.createX2;
                                            y2=oGUI.createY2;
                                            x3=real_snap(mouse_x,16,8);
                                            y3=real_snap(mouse_y,16,8);
                                        }
                                        createSector=0;
                                    break;
                            }
        }
    }
    if (mouse_check_button_released(mb_left) and !point_in_rectangle(mouse_x,mouse_y,view_xview,view_yview,view_xview+256,view_yview+view_hview) and !TDPreview){
        switch(tool){
            case "line" : with (instance_create(mouse_x,mouse_y,oLine)){
                                x1=8+oGUI.xx div 16*16;
                                y1=8+oGUI.yy div 16*16;
                                x2=8+mouse_x div 16*16;
                                y2=8+mouse_y div 16*16;
                                z=oGUI.createZ;
                                height=oGUI.createHeight;
                            };
                break;
            case "wall" : instance_create(mouse_x,mouse_y,oSlope);
                break;
            case "player" : if (instance_number(oPlayer)=0){instance_create(mouse_x,mouse_y,oPlayer);}else{show_message("1 Player object only!");}
                break;
            case "light" : instance_create(mouse_x,mouse_y,oLight);
        }
    }
    
    if (mouse_check_button_pressed(mb_right)){
        instance_create(mouse_x,mouse_y,oRectangle);
    }
    
    if (keyboard_check_pressed(vk_shift)){
        snap=!snap;
    }
}


if (keyboard_check(ord('V'))){
    vLook=true;
}else{
    vLook=false;
}


/*if (vLook){ //If vertical perspective is on
    voidX=10000;
    voidY=1000;
    with(oObject){
        y=500-z;
    }
}else{
    voidX=10000;
    voidY=10000;
    with(oObject){
        y=yy;
    }
}*/


if (mouse_wheel_up() and !TDPreview){
    if keyboard_check_direct(vk_control){
        createHeight+=8;
    }else{
        createZ+=8;
    }
}
if (mouse_wheel_down() and !TDPreview){
    if keyboard_check_direct(vk_control){
         createHeight-=8;
    }else{
        createZ-=8;
    }
}

if (keyboard_check_pressed(ord('T'))){
    if (!TDPreview){
        if (instance_number(oPlayer)&gt;0){
            instance_create(oPlayer.x,oPlayer.y,oCamera);
            TDPreview=true;
        }else{
            show_message("Error #001 - Player object is missing!");
        }
    }else{
        with(oCamera){
            instance_destroy();
        }
        view_xview[0]=5000;
        view_yview[0]=5000;
        TDPreview=false;
    }
}

/*if (toolPrev!=tool){
    //if tool has changed
    createSector=0; //to avoid problems while creating new sectors
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!TDPreview){
    if (createSector=1){
        draw_line(real_snap(createX,16,8),real_snap(createY,16,8),real_snap(mouse_x,16,8),real_snap(mouse_y,16,8));
    }
    if (createSector=2){
        draw_triangle(real_snap(createX,16,8),real_snap(createY,16,8),real_snap(createX2,16,8),real_snap(createY2,16,8),real_snap(mouse_x,16,8),real_snap(mouse_y,16,8),false);
    }
    
    draw_sprite(sGUI,0,view_xview,view_yview);
    draw_set_color(c_black);
    draw_text(view_xview+8,view_yview+8,"Z: "+string(createZ)+"#Instance height: "+string(createHeight)+"#Instances: "+string(instance_number(oObject))+"#Snapping: "+string(snap)+"#Vertical perspective: "+string(vLook)+"#CreateX2: "+string(createX2)+"#CreateY2: "+string(createY2));
    draw_rectangle(view_xview+view_wview-room_width/100,view_yview+view_hview-room_height/100,view_xview+view_wview+room_width/100,view_yview+view_hview+room_height/100,true);
    draw_rectangle(view_xview+view_wview-room_width/100+view_xview/100,view_yview+view_hview-room_height/100+view_yview/100,view_xview+view_wview-room_width/100+view_xview/100+view_wview/100,view_yview+view_hview-room_height/100+view_yview/100+view_hview/100,true);
    
    if (mouse_check_button(mb_left) and tool="line" and !point_in_rectangle(mouse_x,mouse_y,view_xview,view_yview,view_xview+256,view_yview+view_hview)){
        draw_line_width(xx,yy,8+mouse_x div 16*16,8+mouse_y div 16*16,8);
    }
}

if (instance_number(oCamera)&gt;0){
    draw_set_color(c_purple);
    d3d_set_projection_ortho(0,0,1024,768,0);
    draw_text(0,0,"HP: "+string(oCamera.hp)+"#"+string(oCamera.triggered));
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
