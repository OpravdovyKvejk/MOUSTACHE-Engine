<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//load_models();

pSpeed=0;
pWalkSpeed=2;
pRunSpeed=4;
pCurrSpeed=0;
zz=0;
zw=0;
height=16;
zState=0;
prevSectorZ=0;
sectorZ=0;
commandSent=false;
weapon=0;
triggered=false;
colliding=false;

phspeed=0;
pvspeed=0;

active=false; //DEV
isGhost=false; //DEV

wgravity=1;
wgravityconst=1;
wgravdistance=0;
wjumppower=0;

consoleOpen=false;
consoleText="MOUSTACHE Engine Alpha 2#Debugged on "+string(current_day)+"."+string(current_month)+"."+string(current_year)+"###";
consoleEnterText="";

hp=100;
energy=100;
charge=100;

global.camx=x;
global.camy=y;
global.camsin=sin(direction*pi/180);
global.camcos=cos(direction*pi/180);

d3d_start();
d3d_set_hidden(true);
d3d_set_lighting(false);
d3d_set_culling(false);
d3d_set_shading(true);
texture_set_interpolation(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LOF
LS_create()//This initializes required variables
LS_set_ambience(make_colour_rgb(0,0,50))//Sets the ambient color
LS_set_point_light(1,0,0,8,256,c_aqua)//Creates a point light a makes it white
LS_set_fog(1,c_black,0,512)

L = 1;//Variable for number of lights
a = 0;//Angle around scene
d = 32;//Distace from scene center
z = 16;//Variable for z axis position
c = make_colour_hsv(irandom(255),irandom(255),irandom(55)+200);//Next light color
r = irandom(192)+512;//Next light radius
i = 0;
t = sprite_get_texture(texWall,0);//Main texture
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle=direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main camera loop
var zzz=window_get_height()/2-window_mouse_get_y() xx=window_get_width()/2-window_mouse_get_x();

if (mouse_check_button_pressed(mb_left)){ //shooting
    /*with (instance_create(x,y,oPointer)){
        direction=oCamera.direction;
        speed=10;
        alarm[0]=1000;
        zz=oCamera.zz;
        z=oCamera.z+zz*10;
    }*/
}
if (!consoleOpen){
    if (keyboard_check(ord('S'))){
        pSpeed=pCurrSpeed;
        x-=lengthdir_x(pSpeed,direction);
        y-=lengthdir_y(pSpeed,direction);
        if (isGhost){
            z-=zz*pSpeed;
        }else{
            if (z&lt;1){
                z=1;
            }
        }
    }
    if (keyboard_check(ord('W'))){
        pSpeed=pCurrSpeed;
        x-=lengthdir_x(-pSpeed,direction);
        y-=lengthdir_y(-pSpeed,direction);
        if (isGhost){
            z+=zz*pSpeed;
        }else{
            if (z&lt;1){
                z=1;
            }
        }
    }
    if (keyboard_check(ord('A'))){
        pSpeed=pCurrSpeed;
        x-=lengthdir_x(pSpeed,direction-90);
        y-=lengthdir_y(pSpeed,direction-90);
    }
    if (keyboard_check(ord('D'))){
        pSpeed=pCurrSpeed;
        x-=lengthdir_x(pSpeed,direction+90);
        y-=lengthdir_y(pSpeed,direction+90);
    }
}

if (keyboard_check(ord('W')) or keyboard_check(ord('S')) or keyboard_check(ord('A')) or keyboard_check(ord('D'))){
    if (zState=0){
        zw+=pSpeed/20;
    }
    if (zState=1){
        zw-=pSpeed/20;
    }
    if (zw&gt;=1){
        zState=1;
    }
    if (zw&lt;=-1){
        zState=0;
    }
    wgravdistance=z-sectorZ;
    wgravdistance*=2;
}else{
    if (zw&gt;0){
        zw-=pSpeed/10;
    }
    if (zw&lt;0){
        zw+=pSpeed/10;
    }
}
if (keyboard_check_direct(vk_shift)){
    if (energy&gt;0){
        pCurrSpeed=pRunSpeed;
    }else{
        pCurrSpeed=pWalkSpeed;
    }
}else{
    pCurrSpeed=pWalkSpeed;
}
if (!consoleOpen){
    direction+=xx/4;
    zz+=zzz/360;
    window_mouse_set(window_get_width()/2,window_get_height()/2);
    if (zz&gt;1.5) zz=1.5;
    if (zz&lt;-1.5) zz=-1.5;
}


if (!isGhost){
    if (abs(prevSectorZ-sectorZ)&lt;=8){
        z-=prevSectorZ-sectorZ;
    }//stairs walk
    
    if (wgravdistance&gt;0){
        z-=wgravity*wgravityconst;
        wgravdistance-=wgravity*wgravityconst*2;
        
        wgravityconst+=0.2;
    }
    if (z&lt;sectorZ){
        z+=sectorZ/8-z/8;
    }
    if (z=sectorZ){
        wgravityconst=1;
    }
}

prevSectorZ=sectorZ;
global.camx=x;
global.camy=y;
global.camsin=sin(direction*pi/180);
global.camcos=cos(direction*pi/180);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEV
if (keyboard_check(vk_alt) and keyboard_check_pressed(vk_delete)){
    game_end();
}
if (keyboard_check_pressed(vk_divide)){
    screen_save(get_save_filename_ext("PNG image file|*.png", "", "C:\", "Save screenshot as..."));
}
if (keyboard_check_pressed(vk_delete)){
    consoleOpen=!consoleOpen;
    consoleEnterText="";
    keyboard_string="";
}
if (consoleOpen){
    if (keyboard_check_pressed(vk_anykey) and !keyboard_check_pressed(vk_enter) and !keyboard_check_pressed(vk_backspace)){
        consoleEnterText+=keyboard_string;
        keyboard_string="";
    }
    if (keyboard_check_pressed(vk_enter)){
        console_command(consoleEnterText);
        consoleEnterText="";
    }
    if (keyboard_check_pressed(vk_backspace)){
        consoleEnterText=string_delete(consoleEnterText,string_length(consoleEnterText),1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LIGHT
LS_set_point_light(1,x,y,z+height,512,c_white)//Creates a point light a makes it white

var i=2;
while (instance_number(oLight)&gt;0){
    light=instance_nearest(0,0,oLight);
    LS_set_point_light(i,light.x,light.y,light.z,1024,c_white)//Creates a point light a makes it white
    i++;
    instance_deactivate_object(light);
}
instance_activate_object(oLight);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (consoleOpen){
    d3d_set_projection_ortho(0,0,room_width,room_height,0);
    draw_set_color(c_yellow);
    draw_sprite(texConsole,0,0,0);
    draw_text(0,0,string(consoleText)+"# #"+string(consoleEnterText));
    draw_set_color(c_white);
}



d3d_set_projection_ext(x,y,z-zw+height,x+cos(direction*pi/180),y-sin(direction*pi/180),z+zz-zw+height,0,0,z-zw+height,fov,view_wview[0]/view_hview[0],1,16000);
draw_set_alpha(1);
draw_set_color(c_white);

LS_set_nearest(x,y,z);
LS_set_lighting(1);

with(oLine){
    event_user(0);
}
with(oSector){
    event_user(0);
}

LS_set_lighting(0)

/*d3d_transform_set_identity();
d3d_transform_add_rotation_x(270);
d3d_transform_add_rotation_y(90+zz*40);
d3d_transform_add_rotation_z(90+direction);
d3d_transform_add_translation(x,y,z+height-2-zw/1.5-zz);

draw_set_color(c_white);
d3d_model_draw(weapGHook,0,0,0,sprite_get_texture(texWallActive,0));
d3d_transform_set_identity();*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
